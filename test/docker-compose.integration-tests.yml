version: "3.8"

# environment variable PWD is assumed to be grapl root directory
x-common-variables:
  # All the Pants-based tests can be run from the same image
  pants-image: &pants-image
    image: grapl/pants
    build:
      context: ${PWD}
      dockerfile: ${PWD}/pants.Dockerfile
      target: base
  pants-test: &pants-test
    PANTS_TEST_OUTPUT: "all"
    PANTS_PYTEST_ARGS: "-v -m 'integration_test'"
    TOOLCHAIN_AUTH_TOKEN:

services:
  rust-integration-tests:
    image: grapl/rust-integration-tests:${TAG:-latest}
    build:
      context: ${PWD}/src
      dockerfile: rust/Dockerfile
      target: build-test
      args:
        - RUST_BUILD=test-integration
    # Use the default command defined in the Dockerfile for running integration tests.
    # command: <do not use>
    environment:
      - AWS_REGION
      - DEPLOYMENT_NAME
      - GRAPL_AWS_ACCESS_KEY_ID
      - GRAPL_AWS_ACCESS_KEY_SECRET
      - GRAPL_AWS_ENDPOINT
      - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-INFO}
      - MG_ALPHAS
      - RUST_BACKTRACE=1
      - RUST_LOG=INFO
      - SOURCE_QUEUE_URL=${GRAPL_AWS_ENDPOINT}/queue/${DEPLOYMENT_NAME}-node-identifier-retry-queue
      - GRAPH_MERGER_QUEUE_URL=${GRAPL_AWS_ENDPOINT}/queue/${DEPLOYMENT_NAME}-graph-merger-queue
      - STATIC_MAPPING_TABLE=${DEPLOYMENT_NAME}-static_mapping_table
      - DYNAMIC_SESSION_TABLE=${DEPLOYMENT_NAME}-dynamic_session_table
      - PROCESS_HISTORY_TABLE=${DEPLOYMENT_NAME}-process_history_table
      - FILE_HISTORY_TABLE=${DEPLOYMENT_NAME}-file_history_table
      - INBOUND_CONNECTION_HISTORY_TABLE=${DEPLOYMENT_NAME}-inbound_connection_history_table
      - OUTBOUND_CONNECTION_HISTORY_TABLE=${DEPLOYMENT_NAME}-outbound_connection_history_table
      - NETWORK_CONNECTION_HISTORY_TABLE=${DEPLOYMENT_NAME}-network_connection_history_table
      - IP_CONNECTION_HISTORY_TABLE=${DEPLOYMENT_NAME}-ip_connection_history_table
      - ASSET_ID_MAPPINGS=${DEPLOYMENT_NAME}-asset_id_mappings
      - REDIS_ENDPOINT

  analyzerlib-integration-tests:
    <<: *pants-image
    command: >
      ./pants test --extra-env-vars="['DEPLOYMENT_NAME','GRAPL_LOG_LEVEL','MG_ALPHAS']" src/python/grapl_analyzerlib::
    environment:
      <<: *pants-test
      GRAPL_LOG_LEVEL: ${GRAPL_LOG_LEVEL:-INFO}
      DEPLOYMENT_NAME:
      MG_ALPHAS:

  # grapl-analyzer-deployer-integration-tests:

  analyzer-executor-integration-tests:
    <<: *pants-image
    command: >
      ./pants test --extra-env-vars="['HITCACHE_ADDR','HITCACHE_PORT','MESSAGECACHE_ADDR','MESSAGECACHE_PORT','GRAPL_LOG_LEVEL','IS_RETRY']" src/python/analyzer_executor::
    environment:
      <<: *pants-test
      HITCACHE_ADDR: ${REDIS_HOST}
      HITCACHE_PORT: ${REDIS_PORT}
      MESSAGECACHE_ADDR: ${REDIS_HOST}
      MESSAGECACHE_PORT: ${REDIS_PORT}
      GRAPL_LOG_LEVEL: ${GRAPL_LOG_LEVEL:-INFO}
      IS_RETRY: "False"

  engagement-edge-integration-tests:
    <<: *pants-image
    command: >
      ./pants test --extra-env-vars="['DEPLOYMENT_NAME','UX_BUCKET_URL','GRAPL_API_HOST','GRAPL_HTTP_FRONTEND_PORT','IS_LOCAL','AWS_REGION','GRAPL_AWS_ACCESS_KEY_ID','GRAPL_AWS_ACCESS_KEY_SECRET','GRAPL_AWS_ENDPOINT','GRAPL_TEST_USER_NAME']" src/python/engagement_edge::
    environment:
      AWS_REGION:
      GRAPL_AWS_ACCESS_KEY_ID:
      GRAPL_AWS_ACCESS_KEY_SECRET:
      GRAPL_AWS_ENDPOINT:
      GRAPL_TEST_USER_NAME:
      IS_LOCAL: "True"
      <<: *pants-test
      DEPLOYMENT_NAME:
      UX_BUCKET_URL: "ux_bucket_url"
      GRAPL_API_HOST:
      GRAPL_HTTP_FRONTEND_PORT:

  # TODO: Re-enable these tests after the following issues are resolved:
  # - https://github.com/grapl-security/issue-tracker/issues/385
  # - https://github.com/grapl-security/issue-tracker/issues/386
  # - https://github.com/grapl-security/issue-tracker/issues/387
  # cypress-integration-tests:
  #   image: grapl/grapl-cypress:${TAG:-latest}
  #   build:
  #     context: ${PWD}/test
  #     dockerfile: ./Dockerfile.cypress
  #     target: grapl-cypress
  #   user: ${UID}:${GID}
  #   volumes:
  #     - "./integration-outputs/screenshots:/test/cypress/screenshots"
  #     - "./integration-outputs/videos:/test/cypress/videos"
  #   command: |
  #     /bin/bash -c "
  #       CYPRESS_BASE_URL=http://${GRAPL_API_HOST}:${GRAPL_HTTP_FRONTEND_PORT} cypress run --browser chrome --headless
  #     "
  #   environment:
  #     - GRAPL_API_HOST

  graphql-endpoint-tests:
    <<: *pants-image
    command: >
      ./pants test --extra-env-vars="['AWS_REGION','DEBUG_SERVICES','DEPLOYMENT_NAME','GRAPL_AWS_ENDPOINT','GRAPL_AWS_ACCESS_KEY_ID','GRAPL_AWS_ACCESS_KEY_SECRET','GRAPL_AWS_ENDPOINT','GRAPL_API_HOST','GRAPL_HTTP_FRONTEND_PORT','GRAPL_GRAPHQL_HOST','GRAPL_GRAPHQL_PORT','GRAPL_MODEL_PLUGIN_DEPLOYER_HOST','GRAPL_MODEL_PLUGIN_DEPLOYER_PORT','GRAPL_LOG_LEVEL','MG_ALPHAS','VSC_DEBUGGER_PORT','IS_LOCAL','GRAPL_TEST_USER_NAME']" src/python/graphql_endpoint_tests::
    environment:
      GRAPL_AWS_ACCESS_KEY_ID:
      GRAPL_AWS_ACCESS_KEY_SECRET:
      GRAPL_AWS_ENDPOINT:
      GRAPL_TEST_USER_NAME:
      IS_LOCAL: "True"
      <<: *pants-test
      AWS_REGION:
      DEBUG_SERVICES: ${DEBUG_SERVICES:-}
      DEPLOYMENT_NAME:
      GRAPL_API_HOST:
      GRAPL_HTTP_FRONTEND_PORT:
      GRAPL_GRAPHQL_HOST:
      GRAPL_GRAPHQL_PORT:
      GRAPL_MODEL_PLUGIN_DEPLOYER_HOST:
      GRAPL_MODEL_PLUGIN_DEPLOYER_PORT:
      GRAPL_LOG_LEVEL: ${GRAPL_LOG_LEVEL:-INFO}
      MG_ALPHAS:
      VSC_DEBUGGER_PORT: ${VSC_DEBUGGER_PORT_FOR_GRAPHQL_ENDPOINT_TESTS}
    ports:
      - ${VSC_DEBUGGER_PORT_FOR_GRAPHQL_ENDPOINT_TESTS}:${VSC_DEBUGGER_PORT_FOR_GRAPHQL_ENDPOINT_TESTS}

networks:
  default:
    name: grapl-network
